{
  "_args": [
    [
      {
        "raw": "prompt-choices@^0.4.1",
        "scope": null,
        "escapedName": "prompt-choices",
        "name": "prompt-choices",
        "rawSpec": "^0.4.1",
        "spec": ">=0.4.1 <0.5.0",
        "type": "range"
      },
      "/Users/leblancc/Repositories/gucci/node_modules/prompt-question"
    ]
  ],
  "_from": "prompt-choices@>=0.4.1 <0.5.0",
  "_id": "prompt-choices@0.4.1",
  "_inCache": true,
  "_location": "/prompt-choices",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/prompt-choices-0.4.1.tgz_1480961425460_0.8502996757160872"
  },
  "_npmUser": {
    "name": "jonschlinkert",
    "email": "github@sellside.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "prompt-choices@^0.4.1",
    "scope": null,
    "escapedName": "prompt-choices",
    "name": "prompt-choices",
    "rawSpec": "^0.4.1",
    "spec": ">=0.4.1 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/prompt-autocompletion",
    "/prompt-question"
  ],
  "_resolved": "https://registry.npmjs.org/prompt-choices/-/prompt-choices-0.4.1.tgz",
  "_shasum": "11fa8d586af84fae436b33922fef3c1a9f702f03",
  "_shrinkwrap": null,
  "_spec": "prompt-choices@^0.4.1",
  "_where": "/Users/leblancc/Repositories/gucci/node_modules/prompt-question",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "bugs": {
    "url": "https://github.com/enquirer/prompt-choices/issues"
  },
  "dependencies": {
    "arr-flatten": "^1.0.1",
    "choices-separator": "^0.1.2",
    "clone-deep": "^0.2.4",
    "debug": "^2.2.0",
    "define-property": "^0.2.5",
    "extend-shallow": "^2.0.1",
    "is-number": "^3.0.0",
    "isobject": "^2.1.0",
    "kind-of": "^3.0.4",
    "lazy-cache": "^2.0.1",
    "log-utils": "^0.2.1",
    "radio-symbol": "^0.2.1",
    "set-value": "^0.4.0",
    "terminal-paginator": "^0.2.0",
    "toggle-array": "^0.1.0"
  },
  "description": "Create an array of multiple choice objects for use in prompts.",
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-eslint": "^3.0.1",
    "gulp-format-md": "^0.1.10",
    "gulp-istanbul": "^1.1.1",
    "gulp-mocha": "^3.0.1",
    "gulp-unused": "^0.2.0",
    "mocha": "^3.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "11fa8d586af84fae436b33922fef3c1a9f702f03",
    "tarball": "https://registry.npmjs.org/prompt-choices/-/prompt-choices-0.4.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "gitHead": "076ba0ce68514da680218c8121e9401ed858f022",
  "homepage": "https://github.com/enquirer/prompt-choices",
  "keywords": [
    "answer",
    "answers",
    "ask",
    "checkbox",
    "choice",
    "choices",
    "cli",
    "command",
    "enquirer",
    "enquirerprompt",
    "input",
    "inquire",
    "inquirer",
    "interact",
    "list",
    "menu",
    "password",
    "prompt",
    "prompts",
    "question",
    "readline",
    "stdin",
    "stdout",
    "terminal",
    "tty",
    "ui"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jonschlinkert",
      "email": "github@sellside.com"
    }
  ],
  "name": "prompt-choices",
  "optionalDependencies": {},
  "readme": "# prompt-choices [![NPM version](https://img.shields.io/npm/v/prompt-choices.svg?style=flat)](https://www.npmjs.com/package/prompt-choices) [![NPM downloads](https://img.shields.io/npm/dm/prompt-choices.svg?style=flat)](https://npmjs.org/package/prompt-choices) [![Build Status](https://img.shields.io/travis/enquirer/prompt-choices.svg?style=flat)](https://travis-ci.org/enquirer/prompt-choices)\n\n> Create an array of multiple choice objects for use in prompts.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save prompt-choices\n```\n\n## Usage\n\n```js\nvar Choices = require('prompt-choices');\nvar choices = new Choices(['foo', 'bar', 'baz']);\n```\n\n## API\n\n### [Choices](index.js#L19)\n\nCreate a new `Choices` collection.\n\n**Params**\n\n* `choices` **{Array}**: One or more `choice` strings or objects.\n\n**Example**\n\n```js\nvar choices = new Choices(['foo', 'bar', 'baz']);\nvar choices = new Choices([{name: 'foo'}, {name: 'bar'}, {name: 'baz'}]);\n```\n\n### [.addChoices](index.js#L44)\n\nAdd an array of normalized `choice` objects to the `choices` array. This method is called in the constructor, but it can also be used to add choices after instantiation.\n\n**Params**\n\n* `choices` **{Array|Object}**: One or more choices to add.\n\n**Example**\n\n```js\nchoices.addChoices(['a', 'b', 'c']);\n```\n\n### [.choice](index.js#L77)\n\nCreate a new `Choice` object.\n\n**Params**\n\n* `choice` **{String|Object}**\n* `returns` **{Object}**: Returns a choice object.\n\n**Example**\n\n```js\nchoices.choice('blue');\n```\n\n### [.separator](index.js#L92)\n\nCreate a new `Separator` object. See [choices-separator](https://github.com/enquirer/choices-separator) for more details.\n\n**Params**\n\n* `separator` **{String}**: Optionally pass a string to use as the separator.\n* `returns` **{Object}**: Returns a separator object.\n\n**Example**\n\n```js\nchoices.separator();\n```\n\n### [.getChoice](index.js#L107)\n\nGet a non-separator choice from the collection.\n\n**Params**\n\n* `idx` **{Number}**: The selected choice index\n* `returns` **{Object|undefined}**: Return the matched choice object or undefined\n\n**Example**\n\n```js\nchoices.getChoice(1);\n```\n\n### [.getIndex](index.js#L127)\n\nGet the index of a non-separator choice from the collection.\n\n**Params**\n\n* `key` **{String}**: The key of the choice to get\n* `returns` **{Number}**: Index of the choice or `-1`;\n\n**Example**\n\n```js\nchoices.getChoice('foo');\n```\n\n### [.get](index.js#L148)\n\nGet the choice or separator object at the specified index.\n\n**Params**\n\n* `idx` **{Number}**: The index of the object to get\n* `returns` **{Object}**: Returns the specified choice\n\n**Example**\n\n```js\nchoices.getChoice(1);\n```\n\n### [.enable](index.js#L165)\n\nEnable the choice at the given `idx`.\n\n**Params**\n\n* `idx` **{Number}**: The index of the choice to enable.\n\n**Example**\n\n```js\nchoices.enable(1);\n```\n\n### [.disable](index.js#L180)\n\nDisable the choice at the given `idx`.\n\n**Params**\n\n* `idx` **{Number}**: The index of the choice to enable.\n\n**Example**\n\n```js\nchoices.disable(1);\n```\n\n### [.toggleChoices](index.js#L195)\n\nEnable the choice at the given `index`, and disable all other choices.\n\n**Params**\n\n* `idx` **{Number}**: The index of the choice to toggle.\n\n**Example**\n\n```js\nchoices.toggleChoices(1);\n```\n\n### [.toggleChoice](index.js#L210)\n\nToggle the choice at the given `idx`.\n\n**Params**\n\n* `idx` **{Number}**: The index of the choice to toggle.\n\n**Example**\n\n```js\nchoices.toggleChoice(1);\n```\n\n### [.where](index.js#L224)\n\nReturn choices that return truthy based on the given `val`.\n\n**Params**\n\n* `val` **{Object|Function|String}**\n* `returns` **{Array}**: Matching choices or empty array\n\n### [.pluck](index.js#L259)\n\nPluck an object with the specified key from the choices collection.\n\n**Params**\n\n* `key` **{String}**: Property name to use for plucking objects.\n* `returns` **{Array}**: Plucked objects\n\n### [.length](index.js#L302)\n\nGetter for getting the length of the collection.\n\n### [.realChoices](index.js#L317)\n\nGetter for getting all non-separator choices from the collection.\n\n### [.realLength](index.js#L340)\n\nGetter for getting the length of the collection excluding non-separator choices.\n\n### [.Separator](index.js#L360)\n\nCreate a new `Separator` object. See [choices-separator](https://github.com/enquirer/choices-separator) for more details.\n\n**Params**\n\n* `separator` **{String}**: Optionally pass a string to use as the separator.\n* `returns` **{Object}**: Returns a separator object.\n\n**Example**\n\n```js\nnew Choices.Separator();\n```\n\n## Attribution\n\nCode is partially based on the `Choices` class in Inquirer.\n\n## About\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright Â© 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/enquirer/prompt-choices/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.1.30, on August 30, 2016._",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/enquirer/prompt-choices.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "verb": {
    "toc": false,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "lint": {
      "reflinks": true
    },
    "related": {
      "list": []
    },
    "reflinks": [
      "verb",
      "verb-generate-readme"
    ]
  },
  "version": "0.4.1"
}
